name: Deploy

on:
  push:
    branches:
      - master

jobs:
  Deploy:
    runs-on: ubuntu-latest
    env:
      SERVER_PROFILE: test
      DATABASE_URL: jdbc:mysql://127.0.0.1:3306/board_db_test
      DATABASE_NAME: board_db_test
      DATABASE_ROOT_PASSWORD: root
      DATABASE_USERNAME: board_user_test
      DATABASE_PASSWORD: db1004
      REDIS_HOST: 127.0.0.1
      REDIS_PORT: 6379
      MAIL_HOST: ${{ secrets.MAIL_HOST }}
      MAIL_PORT: ${{ secrets.MAIL_PORT }}
      MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
      MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
      GOOGLE_OAUTH2_CLIENT_ID: ${{ secrets.GOOGLE_OAUTH2_CLIENT_ID }}
      GOOGLE_OAUTH2_CLIENT_SECRET: ${{ secrets.GOOGLE_OAUTH2_CLIENT_SECRET }}
      GOOGLE_OAUTH2_REDIRECT_URI: ${{ secrets.GOOGLE_OAUTH2_REDIRECT_URI }}
      GOOGLE_OAUTH2_SCOPE: ${{ secrets.GOOGLE_OAUTH2_SCOPE }}
      NAVER_OAUTH2_CLIENT_ID: ${{ secrets.NAVER_OAUTH2_CLIENT_ID }}
      NAVER_OAUTH2_CLIENT_SECRET: ${{ secrets.NAVER_OAUTH2_CLIENT_SECRET }}
      NAVER_OAUTH2_AUTHORIZATION_GRANT_TYPE: ${{ secrets.NAVER_OAUTH2_AUTHORIZATION_GRANT_TYPE }}
      NAVER_OAUTH2_REDIRECT_URI: ${{ secrets.NAVER_OAUTH2_REDIRECT_URI }}
      NAVER_OAUTH2_SCOPE: ${{ secrets.NAVER_OAUTH2_SCOPE }}
      KAKAO_OAUTH2_CLIENT_ID: ${{ secrets.KAKAO_OAUTH2_CLIENT_ID }}
      KAKAO_OAUTH2_CLIENT_SECRET: ${{ secrets.KAKAO_OAUTH2_CLIENT_SECRET }}
      KAKAO_OAUTH2_REDIRECT_URI: ${{ secrets.KAKAO_OAUTH2_REDIRECT_URI }}
      KAKAO_OAUTH2_SCOPE: ${{ secrets.KAKAO_OAUTH2_SCOPE }}

    steps:
      - name: 체크 아웃
        uses: actions/checkout@v4

      - name: 데이터베이스 설정
        run: |
          sudo /etc/init.d/mysql start
          mysql -e "CREATE DATABASE ${{ env.DATABASE_NAME }};" -uroot -p${{ env.DATABASE_ROOT_PASSWORD }}
          mysql -e "CREATE user '${{ env.DATABASE_USERNAME }}'@'%' IDENTIFIED BY '${{ env.DATABASE_PASSWORD }}';" -uroot -p${{ env.DATABASE_ROOT_PASSWORD }}
          mysql -e "GRANT ALL ON *.* TO '${{ env.DATABASE_USERNAME }}'@'%';" -uroot -p${{ env.DATABASE_ROOT_PASSWORD }}
          mysql -e "FLUSH PRIVILEGES;" -uroot -p${{ env.DATABASE_ROOT_PASSWORD }}

      - name: Redis 설정
        uses: supercharge/redis-github-action@1.7.0
        with:
          redis-version: 7.4.1

      - name: Java 21 설정
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Gradle 캐싱
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: gradlew 파일 실행권한 부여
        run: chmod +x gradlew
        shell: bash

      - name: 프로젝트 빌드
        run: |
          ./gradlew build

      - name: DockerHub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: 도커 이미지 빌드
        run: docker build --platform linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME }}/board-be .

      - name: 도커 이미지 푸시
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/board-be:latest

      - name: GitHub Actions 실행자 IP 얻어오기
        id: GITHUB_ACTIONS_IP
        uses: haythem/public-ip@v1.3

      - name: AWS CLI 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: GitHub Actions 에게 SSH, 80번 포트 접근 권한 부여
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} \
            --ip-permissions \
              'IpProtocol=tcp,FromPort=${{ secrets.EC2_SSH_PORT }},ToPort=${{ secrets.EC2_SSH_PORT }},IpRanges=[{CidrIp=${{ steps.GITHUB_ACTIONS_IP.outputs.ipv4 }}/32}]' \
              'IpProtocol=tcp,FromPort=80,ToPort=80,IpRanges=[{CidrIp=${{ steps.GITHUB_ACTIONS_IP.outputs.ipv4 }}/32}]'

      - name: 배포 대상 포트/PROFILE 확인
        run: |
          response=$(curl -s -w "%{http_code}" "http://${{ secrets.LIVE_SERVER_IP }}/api/v1/deploy/health-check")
          STATUS="${response: -3}"  # 마지막 3글자 (HTTP 상태 코드)
          BODY="${response::-3}"     # 나머지 (응답 본문)
          
          echo "STATUS=$STATUS"
          
          if [ "$STATUS" = "200" ]; then
            CURRENT_PROFILE=$(echo "$BODY" | jq -r '.profile')
            echo "CURRENT_PROFILE=$CURRENT_PROFILE"
            CURRENT_UPSTREAM="$CURRENT_PROFILE"
          else
            CURRENT_UPSTREAM="green"
          fi
          
          echo "CURRENT_UPSTREAM=$CURRENT_UPSTREAM"
          
          echo "CURRENT_UPSTREAM=$CURRENT_UPSTREAM" >> $GITHUB_ENV
          
          if [ "$CURRENT_UPSTREAM" = "blue" ]; then
            echo "CURRENT_PORT=${{ secrets.BLUE_PORT }}" >> $GITHUB_ENV
            echo "STOPPED_PORT=${{ secrets.GREEN_PORT }}" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=green" >> $GITHUB_ENV
          elif [ "$CURRENT_UPSTREAM" = "green" ]; then
            echo "CURRENT_PORT=${{ secrets.GREEN_PORT }}" >> $GITHUB_ENV
            echo "STOPPED_PORT=${{ secrets.BLUE_PORT }}" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=blue" >> $GITHUB_ENV
          else
            echo "error"
            exit 1
          fi

      - name: GitHub Actions - EC2 의 기존 컨테이너 포트 접근 권한 부여
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} \
            --ip-permissions \
              'IpProtocol=tcp,FromPort=${{ env.STOPPED_PORT }},ToPort=${{ env.STOPPED_PORT }},IpRanges=[{CidrIp=${{ steps.GITHUB_ACTIONS_IP.outputs.ipv4 }}/32}]'

      - name: SSH Key 설정
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/board-ec2-key.pem
          chmod 600 ~/.ssh/board-ec2-key.pem
          echo "Host board-ec2" >> ~/.ssh/config
          echo "  HostName ${{ secrets.LIVE_SERVER_IP }}" >> ~/.ssh/config
          echo "  User ${{ secrets.EC2_USERNAME }}" >> ~/.ssh/config
          echo "  IdentityFile ~/.ssh/board-ec2-key.pem" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config

      - name: 도커 이미지 풀링 및 컨테이너 실행
        run: |
          ssh board-ec2 << 'EOF'
            set -e
          
            # 기존 파일 제거
            rm -f .env
            rm -rf ./keys
          
            # 경로 생성
            mkdir -p ~/keys
          
            # RSA 키 파일 복사
            echo "${{secrets.RSA_ACCESS_TOKEN_PUBLIC_KEY_PEM}}" > ./keys/access-token_public-key.pem
            echo "${{secrets.RSA_ACCESS_TOKEN_PRIVATE_KEY_PEM}}" > ./keys/access-token_private-key.pem
            echo "${{secrets.RSA_REFRESH_TOKEN_PUBLIC_KEY_PEM}}" > ./keys/refresh-token_public-key.pem
            echo "${{secrets.RSA_REFRESH_TOKEN_PRIVATE_KEY_PEM}}" > ./keys/refresh-token_private-key.pem
          
            # 설정값을 환경변수 파일(.env)에 주입
            echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
            echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}" >> .env
            echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
            echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
            echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env
            echo "MAIL_HOST=${{ secrets.MAIL_HOST }}" >> .env
            echo "MAIL_PORT=${{ secrets.MAIL_PORT }}" >> .env
            echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env
            echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env

            echo "GOOGLE_OAUTH2_CLIENT_ID=${{ secrets.GOOGLE_OAUTH2_CLIENT_ID }}" >> .env
            echo "GOOGLE_OAUTH2_CLIENT_SECRET=${{ secrets.GOOGLE_OAUTH2_CLIENT_SECRET }}" >> .env
            echo "GOOGLE_OAUTH2_REDIRECT_URI=${{ secrets.GOOGLE_OAUTH2_REDIRECT_URI }}" >> .env
            echo "GOOGLE_OAUTH2_SCOPE=${{ secrets.GOOGLE_OAUTH2_SCOPE }}" >> .env

            echo "NAVER_OAUTH2_CLIENT_ID=${{ secrets.NAVER_OAUTH2_CLIENT_ID }}" >> .env
            echo "NAVER_OAUTH2_CLIENT_SECRET=${{ secrets.NAVER_OAUTH2_CLIENT_SECRET }}" >> .env
            echo "NAVER_OAUTH2_AUTHORIZATION_GRANT_TYPE=${{ secrets.NAVER_OAUTH2_AUTHORIZATION_GRANT_TYPE }}" >> .env
            echo "NAVER_OAUTH2_REDIRECT_URI=${{ secrets.NAVER_OAUTH2_REDIRECT_URI }}" >> .env
            echo "NAVER_OAUTH2_SCOPE=${{ secrets.NAVER_OAUTH2_SCOPE }}" >> .env

            echo "KAKAO_OAUTH2_CLIENT_ID=${{ secrets.KAKAO_OAUTH2_CLIENT_ID }}" >> .env
            echo "KAKAO_OAUTH2_CLIENT_SECRET=${{ secrets.KAKAO_OAUTH2_CLIENT_SECRET }}" >> .env
            echo "KAKAO_OAUTH2_REDIRECT_URI=${{ secrets.KAKAO_OAUTH2_REDIRECT_URI }}" >> .env
            echo "KAKAO_OAUTH2_SCOPE=${{ secrets.KAKAO_OAUTH2_SCOPE }}" >> .env

            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/board-be:latest
            docker compose -f docker-compose-${{ env.TARGET_UPSTREAM }}.yml up -d
          EOF

      - name: 새로 실행한 서버 컨테이너 헬스 체크
        uses: jtalk/url-health-check-action@v3
        with:
          url: http://${{ secrets.LIVE_SERVER_IP }}:${{ env.STOPPED_PORT }}/api/v1/deploy/health-check
          max-attempts: 3
          retry-delay: 10s

      - name: Nginx 의 대상 서버를 새로 실행한 컨테이너쪽으로 전환
        run: |
          ssh board-ec2 << 'EOF'
            set -e
            docker exec -i nginx bash -c 'echo "set \$service_url ${{ env.TARGET_UPSTREAM }};" > /etc/nginx/conf.d/service-env.inc && nginx -s reload'
          EOF

      - name: 기존 배포 컨테이너 정지
        run: |
          ssh board-ec2 << 'EOF'
            set -e
            if docker ps -a --format '{{.Names}}' | grep -q "^${{ env.CURRENT_UPSTREAM }}$"; then
              docker stop ${{ env.CURRENT_UPSTREAM }}
              docker rm ${{ env.CURRENT_UPSTREAM }}
            else
              echo "Container ${{ env.CURRENT_UPSTREAM }} does not exist, skipping removal."
            fi
          EOF

      - name: 불필요한 오래된 이미지 제거
        run: |
          ssh board-ec2 << 'EOF'
            set -e
            docker image prune -a --filter "until=24h"
          EOF

      - name: GitHub Actions - SSH 및 컨테이너 실제 포트 접근 권한 제거
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress \
          --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} \
          --ip-permissions \
            'IpProtocol=tcp,FromPort=${{ secrets.EC2_SSH_PORT }},ToPort=${{ secrets.EC2_SSH_PORT }},IpRanges=[{CidrIp=${{ steps.GITHUB_ACTIONS_IP.outputs.ipv4 }}/32}]' \
            'IpProtocol=tcp,FromPort=${{env.STOPPED_PORT}},ToPort=${{env.STOPPED_PORT}},IpRanges=[{CidrIp=${{ steps.GITHUB_ACTIONS_IP.outputs.ipv4 }}/32}]' \
            'IpProtocol=tcp,FromPort=80,ToPort=80,IpRanges=[{CidrIp=${{ steps.GITHUB_ACTIONS_IP.outputs.ipv4 }}/32}]'
